---
title: "02. Preparing Mappable Data"
author: "Caroline Davidson"
format: html
editor: visual
---

# Step 2: Preparing Mappable Data

The purpose of this file is to prepare data for mapping. This entails loading and formatting the various data files and shapefiles (geographic boundary files) as well as joining them so that ACS data can be mapped onto Illinois census tracts and counties in future scripts. This script is broken out into the following steps / sections:

- A: Load Data
- B: Data Standardization - County Names
- C: Data Standardization - Census Tract Numbers
- D: Joining Datasets for County Level
- E: Joining Datasets for Census Tract Level
- F: Define and Apply IL Regions
- G: Create Region-level Dataset for Mapping
- H: Save Mappable Data to csv

```{r setup}
#| echo: false
#| include: false
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file()) # set main project folder as working directory

rm(list = ls())
library(tidyverse)
library(sf)
library(rgdal)
```

## A. Load Data
The following code chunk loads the various datasets that will be used for mapping. These include:

- SNAP retailers database with Link Match partners identified (output from the first script in this project)
- Shape files for geographic boundaries (Illinois counties and Illinois census tracts)
- SNAP-related Census data for Illinois (5 year estimates at the county and census tract levels)
- metadata files that describe the variables in the above census tract files

1-year ACS estimates are not available at the census tract level and are not available for all counties in Illinois, so all analysis will use the 5-year estimates.

```{r load data}
#| message: false
#| warning: false
# Link Up and SNAP retailers data
SNAP_retailers <- read_csv("Data/Retailers and Partners/Output/IL SNAP Retailers.csv", show_col_types = FALSE)

# GEOGRAPHIC BOUNDARIES
boundaries_counties <- st_read("Data/Geographic Boundaries/Counties/IL counties POLYGON/Illinois.shp")
boundaries_census_tracts <- st_read("Data/Geographic Boundaries/Census Tracts/tl_2022_17_tract/tl_2022_17_tract.shp")

# ACS DATA
# 5-year estimates at the census tract level
acs_5yr_data_tract <- read_csv("Data/ACS Data/Census Tract Level/ACSST5Y2021.S2201_2023-07-11T173255/ACSST5Y2021.S2201-Data.csv")
acs_5yr_data_tract <- acs_5yr_data_tract[-1,]
acs_5yr_metadata_tract <- read_csv("Data/ACS Data/Census Tract Level/ACSST5Y2021.S2201_2023-07-11T173255/ACSST5Y2021.S2201-Column-Metadata.csv")
# fix formatting of metadata descriptions for readability
acs_5yr_metadata_tract$Label <- gsub("!!", ": ", acs_5yr_metadata_tract$Label)

# county level data for 5 year estimates
acs_5yr_data_county <- read_csv("Data/ACS Data/County Level/5 year estimates/ACSST5Y2021.S2201-Data.csv")
acs_5yr_data_county <- acs_5yr_data_county[-1,]
acs_5yr_metadata_county <- read_csv("Data/ACS Data/County Level/5 year estimates/ACSST5Y2021.S2201-Column-Metadata.csv")
acs_5yr_metadata_county$Label <- gsub("!!", ": ", acs_5yr_metadata_county$Label)
```

## B. Data Standardization - County Names

This code chunk explores whether county names match across datasets. This is scratch work that does not need to be run. The important code for this topic is in the code chunk after this one.
```{r explore county names - optional to run}
# check if counties in acs_5yr_data_county and boundaries_counties are the same (have same #)
# create new variable removing "County, Illinois" from end of county names in acs_5yr_data_county
acs_5yr_data_county$County <- gsub(" County, Illinois", "", acs_5yr_data_county$NAME)
acs_5yr_data_county <- relocate(acs_5yr_data_county, County, .after = NAME) # reorder columns

# CROSS-CHECK: boundaries_county and acs_5yr_data_county (bi-directional)
sum(tolower(boundaries_counties$COUNTY_NAM) %in% tolower(acs_5yr_data_county$County)) # 101 matches
sum(!(tolower(boundaries_counties$COUNTY_NAM) %in% tolower(acs_5yr_data_county$County))) # 1 non-match
# print out-non matches
boundaries_counties$COUNTY_NAM[!(tolower(boundaries_counties$COUNTY_NAM) %in% tolower(acs_5yr_data_county$County))]
# DEWITT (in boundaries_counties df)
acs_5yr_data_county$County[!(tolower(acs_5yr_data_county$County) %in% tolower(boundaries_counties$COUNTY_NAM))]
# De Witt (in acs data)

# CROSS-CHECK: SNAP_retailers and acs_5yr_data_county (bi-directional)
## check which county in SNAP_retailers isn't in acs_5yr_data_county (has one extra)
# create smaller df with just unique county names in SNAP_retailers dataframe
SNAP_retailers_counties <- SNAP_retailers %>% distinct(County) %>% arrange(County)
sum(tolower(SNAP_retailers_counties$County) %in% tolower(acs_5yr_data_county$County)) # 98 matches
sum(!(tolower(SNAP_retailers_counties$County) %in% tolower(acs_5yr_data_county$County))) # 5 non-matches

SNAP_retailers_counties$County[!(tolower(SNAP_retailers_counties$County) %in% tolower(acs_5yr_data_county$County))]
# "DE KALB" "DU PAGE" "LA SALLE" "ST CLAIR" and NA (in SNAP_retailers)
acs_5yr_data_county$County[!(tolower(acs_5yr_data_county$County) %in% tolower(SNAP_retailers_counties$County))]
# "DeKalb" "DuPage" "LaSalle" "St. Clair" (in acs data)

# CROSS-CHECK: SNAP_retailers and boundaries_counties (bi-directional)
sum(tolower(SNAP_retailers_counties$County) %in% tolower(boundaries_counties$COUNTY_NAM)) # 97 matches
sum(!(tolower(SNAP_retailers_counties$County) %in% tolower(boundaries_counties$COUNTY_NAM))) # 6 non-matches

SNAP_retailers_counties$County[!(tolower(SNAP_retailers_counties$County) %in% tolower(boundaries_counties$COUNTY_NAM))]
# "DE KALB" "DE WITT" "DU PAGE" "LA SALLE" "ST CLAIR" (in SNAP_retailers)
boundaries_counties$COUNTY_NAM[!(tolower(boundaries_counties$COUNTY_NAM) %in% tolower(SNAP_retailers_counties$County))]
#  "LASALLE" "DEKALB" "DEWITT" "DUPAGE"  "ST. CLAIR" (in boundaries_counties)
```

The code chunk below investigates whether county names match across the ACS dataset and shapefile (the county column will be used to merge the two datasets). It then re-codes DeWitt county in the ACS data to match the formatting in the shapefile to allow for joining the two datasets.
```{r adjust county names in acs data}
# check if counties in acs_5yr_data_county and boundaries_counties are the same (have same #)
# create new variable removing "County, Illinois" from end of county names in acs_5yr_data_county
acs_5yr_data_county$County <- gsub(" County, Illinois", "", acs_5yr_data_county$NAME)
acs_5yr_data_county <- relocate(acs_5yr_data_county, County, .after = NAME) # reorder columns

# CROSS-CHECK: boundaries_counties and acs_5yr_data_county (bi-directional)
# print out-non matches
boundaries_counties$COUNTY_NAM[!(tolower(boundaries_counties$COUNTY_NAM) %in% tolower(acs_5yr_data_county$County))]
# DEWITT (in boundaries_counties df)
acs_5yr_data_county$County[!(tolower(acs_5yr_data_county$County) %in% tolower(boundaries_counties$COUNTY_NAM))]
# De Witt (in acs data)

# make necessary adjustments to county names across dataframes
# adjust "De Witt" to "DeWitt" in acs_5yr_data_county
acs_5yr_data_county$County <- gsub("De Witt", "DeWitt", acs_5yr_data_county$County)
```

The following code chunk corrects county names in the SNAP_retailers dataset to match the format of the other datasets. This involves recoding county names as follows:

- old >> new
- DE KALB >> DEKALB
- DE WITT >> DEWITT
- DU PAGE >> DUPAGE
- LA SALLE >> LASALLE
- ST CLAIR >> ST. CLAIR
```{r adjust county names in SNAP_retailers data}
SNAP_retailers$County <- case_when(
  SNAP_retailers$County == "DE KALB" ~ "DEKALB",
  SNAP_retailers$County == "DE WITT" ~ "DEWITT",
  SNAP_retailers$County == "DU PAGE" ~ "DUPAGE",
  SNAP_retailers$County == "LA SALLE" ~ "LASALLE",
  SNAP_retailers$County == "ST CLAIR" ~ "ST. CLAIR",
  TRUE ~ SNAP_retailers$County
)
```


## C. Data Standardization - Census Tract Numbers

The code chunk below investigates whether census tract names match across the ACS dataset and the census tract shapefile.
- Census tract names in the acs_5yr_data_tract dataframe have the following name (format):
    - NAME (Census Tract 107.01, Champaign County, Illinois)
- Census tract names in the boundaries_census_tracts dataframe have the following name (format):
    - NAME (107.01)
We'll create 2 new columns for the ACS data, one that has just the census tract number and another with just the county name.

```{r standardize tract numbers in acs data}
# ACS DATA
# TASK: create new columns in acs_5yr_data_tract that separate out census tract number and county
# Step 1: make a copy of the NAME column called County (this column will hold only the county name at the end of these steps)
acs_5yr_data_tract$County <- acs_5yr_data_tract$NAME 
# Step 2: remove "Census Tract " from beginning of new County column 
acs_5yr_data_tract$County <-  gsub("Census Tract ", "", acs_5yr_data_tract$County)
# Step 3: remove " County, Illinois from end of County column
acs_5yr_data_tract$County <-  gsub(" County, Illinois", "", acs_5yr_data_tract$County)
# Step 4: Grab tract number and assign to new variable called Tract_Number (grabs everything up to and including the comma)
acs_5yr_data_tract$Tract_Number <- str_extract(acs_5yr_data_tract$County, "^(.+?),")
acs_5yr_data_tract$Tract_Number <- gsub(",", "", acs_5yr_data_tract$Tract_Number) # remove trailing comma
# Step 5: Remove county number from County column
acs_5yr_data_tract$County <- gsub("^(.+?), ", "", acs_5yr_data_tract$County)
# Step 6: Reorder columns to make looking at data easier
acs_5yr_data_tract <- relocate(acs_5yr_data_tract, c(Tract_Number, County), .after = NAME)
# RESULT: County name contains only county name, Tract_Number column contains only tract number
# we can now use the Tract_Number column in the acs data to match to the shape file

# check names of these columns in these two dataframes
# will check a subset to understand what's going on in each: tract number 107.01
acs_tract_107.01_subset <- acs_5yr_data_tract %>% filter(Tract_Number == "107.01")
boundaries_tract_107.01_subset <- boundaries_census_tracts %>% filter(NAME == "107.01")
```


## D. Joining Datasets for County Level
Before merging ACS data with geographic boundaries, I'll select the variables of interest in the ACS data and create a subset of the data with only those variables to have a more manageable dataset to work with (there are over 900 variables in the ACS data). 

SNAP specific variables start at index 307 in the metadata file. I selected the following variables for now:

- S2201_C01_001E / Estimate: Total: Households
- S2201_C03_001E  /  Estimate: Households receiving food stamps/SNAP: Households
- S2201_C03_021E /  Estimate: Households receiving food stamps/SNAP: Households: POVERTY STATUS IN THE PAST 12 MONTHS: Below poverty level
- S2201_C04_001E  /  Estimate: Percent households receiving food stamps/SNAP: Households

This code chunk joins the county-level ACS data with the county boundaries shapefile. The SNAP_retailers data will be joined later on. It then keeps only the variables that will be used during mapping to make the dataset a more manageable size.
```{r join acs, LinkUp, and shape file - county level}
# keep and rename only relevant variables from acs data
acs_5yr_data_county <- acs_5yr_data_county %>% 
  select(GEO_ID, NAME, County, # select only relevant variables
         n_households = S2201_C01_001E,
         n_hh_snap = S2201_C03_001E,
         n_hh_snap_poor = S2201_C03_021E,
         perc_hh_snap = S2201_C04_001E
         ) %>%
  mutate(n_households = as.numeric(n_households), # convert variables to numerical format
         n_hh_snap = as.numeric(n_hh_snap),
         n_hh_snap_poor = as.numeric(n_hh_snap_poor),
         perc_hh_snap = as.numeric(perc_hh_snap))

# merge acs data to county boundary shapefile
county_acs <- merge(transform(boundaries_counties, COUNTY_NAM = tolower(COUNTY_NAM)),
                     transform(acs_5yr_data_county, County = tolower(County)),
                    by.x = "COUNTY_NAM", by.y = "County", all.x = TRUE)
```



## E. Joining Datasets for Census Tract Level
Tract-level data needs to be joined by GEOID rather than tract number since tract numbers repeat across counties. The following code chunk checks that GEOIDs match across the ACS and shapefile data. 
```{r tract GEOID check across datasets}
# in acs data all geoIDs start with 1400000US then the geoID code that's the same as in shape file
acs_5yr_data_tract$GEO_ID <- gsub("1400000US", "", acs_5yr_data_tract$GEO_ID)

# check that all GEO_IDs that show up in acs_5yr_data_tract show up in boundaries_census_tracts and vice versa
sum(acs_5yr_data_tract$GEO_ID %in% boundaries_census_tracts$GEOID) #3265 matches
sum(!(acs_5yr_data_tract$GEO_ID %in% boundaries_census_tracts$GEOID)) # 0 non-matches

sum(boundaries_census_tracts$GEOID %in% acs_5yr_data_tract$GEO_ID) # 3265 matches
sum(!(boundaries_census_tracts$GEOID %in% acs_5yr_data_tract$GEO_ID)) # - non-matches

# checking that census tracts aren't repeated in the data
length(unique(boundaries_census_tracts$GEOID)) # 3265 unique values
length(unique(acs_5yr_data_tract$GEO_ID)) # 3265 unique values
```

The checks on GEO ID above all checked out (no repeated GEO IDs, same GEO IDs in both files) so the data is now ready to merge. This code chunk joins the census tract-level ACS data with the census tract boundaries shapefile. The SNAP_retailers data will be joined later on.
```{r join acs, LinkUp, and shape file - census tract level}
#| warning: false
# keep and rename only relevant variables from acs data
acs_5yr_data_tract <- acs_5yr_data_tract %>% 
  select(GEO_ID, NAME, Tract_Number, County,
         n_households = S2201_C01_001E,
         n_hh_snap = S2201_C03_001E,
         n_hh_snap_poor = S2201_C03_021E,
         perc_hh_snap = S2201_C04_001E
         ) %>%
    mutate(n_households = as.numeric(n_households), # convert variables to numerical format
         n_hh_snap = as.numeric(n_hh_snap),
         n_hh_snap_poor = as.numeric(n_hh_snap_poor),
         perc_hh_snap = as.numeric(perc_hh_snap)) # we get 8 NAs for this variable because value was "-"

# merge acs data to census tract boundary shapefile
tract_acs <- merge(boundaries_census_tracts,
                   acs_5yr_data_tract,
                   by.x = "GEOID", by.y = "GEO_ID", all = TRUE)
```

This code chunk saves a subset of the data dictionary (metadata file) with only the variables kept in the dataset and adds a column for the variable name for clarity.
```{r save subset of relevant metadata}
# keep only relevant metadata
metadata_acs <- acs_5yr_metadata_county %>% 
  filter(`Column Name` %in% c("S2201_C01_001E",
                              "S2201_C03_001E",
                              "S2201_C03_021E",
                              "S2201_C04_001E")
  )

# add column for current variable names
metadata_acs <- metadata_acs %>% 
  mutate(`Variable Name` = 
    case_when(
      `Column Name` == "S2201_C01_001E" ~ "n_households",
      `Column Name` == "S2201_C03_001E" ~ "n_hh_snap",
      `Column Name` == "S2201_C03_021E" ~ "n_hh_snap_poor",
      `Column Name` == "S2201_C04_001E" ~ "perc_hh_snap"
    )
  )
```

## F. Define and Apply IL Regions
The below code chunk defines the regions that will be used to divide up the state. If differently-constructed regions are desired in the future, they should be adjusted in this code chunk and the one that follows it that applies these regions to the datasets. The rest of the file will run fine and consider this new division of regions as defined in this code chunk and applied in the following code chunk.
```{r define IL regions}
#| results: hide
all_counties <- unique(acs_5yr_data_county$County)
all_counties # this will print out the county names, be sure to spell accordingly if you change the division of regions below
# note, you don't need to respect capitalization, but you do need to respect spacing and punctuation
# "St. Clair" and "St Clair" will be interpreted as two different counties, so will "La Salle" and "LaSalle"
# syntax is also important here, all county names must be in "", separated by a comma that is outside the quotes

region_central <- c("Cass", "Christian", "Greene", "Logan", "Macon", "Macoupin",
                    "Menard", "Montgomery", "Morgan", "Sangamon", "Scott", "Shelby")

region_northern <- c("Boone", "DeKalb", "Ogle", "Stephenson", "Winnebago")

region_greater_chicago <- c("Cook")

region_collar_counties <- c("DuPage", "Grundy", "Kane", "Kankakee", "Kendall", 
                            "Lake", "McHenry", "Will")

region_northwest <- c("Bureau", "Carroll", "Henry", "Jo Daviess", "Lee", "LaSalle",
                      "Mercer", "Putnam", "Rock Island", "Whiteside")

region_north_central <- c("DeWitt", "Fulton", "Livingston", "Marshall", "Mason", "McLean",
                          "Peoria", "Stark", "Tazewell", "Woodford")

region_southeast_central <- c("Clark", "Clay", "Coles", "Crawford", "Cumberland",
                              "Edgar", "Effingham", "Fayette", "Jasper", "Lawrence",
                              "Marion", "Moultrie", "Richland")

region_northeast_central <- c("Champaign", "Douglas", "Ford", "Iroquois", "Piatt", "Vermilion")

region_southern <- c("Alexander", "Edwards", "Franklin", "Gallatin", "Hamilton", 
                    "Hardin", "Jackson", "Jefferson", "Johnson", "Massac", "Perry",
                    "Pope", "Pulaski", "Randolph", "Saline", "Wabash", "Wayne", 
                    "White", "Williamson", "Union")

region_southwest_central <- c("Bond", "Calhoun", "Clinton", "Jersey", "Madison",
                              "Monroe", "St. Clair", "Washington")

region_west_central <- c("Adams", "Brown", "Hancock", "Henderson", "Knox", 
                         "McDonough", "Pike", "Schuyler", "Warren")
```

The code chunk below applies the regions defined above to the census tract and county level datasets as well as the SNAP data by creating a new "region" variable in each and assigning it accordingly. If the designation of regions is changed above, the last two arguments of each line below should be adjusted accordingly. For example, if the Central region is changed to include different counties and its name changes to "Midstate", the first line inside the case_when function for county_acs below should change to:
  tolower(county_acs$COUNTY_NAM) %in% tolower(region_midstate) ~ "Midstate",
  
These adjustments will need to be made manually for the county_acs, tract_acs, and SNAP_retailers datasets in the chunk below.
```{r apply IL regions to datasets}
# add region variable for county-level data
county_acs$region <- case_when(
  tolower(county_acs$COUNTY_NAM) %in% tolower(region_central) ~ "Central",
  tolower(county_acs$COUNTY_NAM) %in% tolower(region_northern) ~ "Northern",
  tolower(county_acs$COUNTY_NAM) %in% tolower(region_greater_chicago) ~ "Chicagoland",
  tolower(county_acs$COUNTY_NAM) %in% tolower(region_collar_counties) ~ "Collar Counties",
  tolower(county_acs$COUNTY_NAM) %in% tolower(region_northwest) ~ "Northwest",
  tolower(county_acs$COUNTY_NAM) %in% tolower(region_north_central) ~ "North Central",
  tolower(county_acs$COUNTY_NAM) %in% tolower(region_southeast_central) ~ "Southeast Central",
  tolower(county_acs$COUNTY_NAM) %in% tolower(region_northeast_central) ~ "Northeast Central",
  tolower(county_acs$COUNTY_NAM) %in% tolower(region_southern) ~ "Southern",
  tolower(county_acs$COUNTY_NAM) %in% tolower(region_southwest_central) ~ "Southwest Central",
  tolower(county_acs$COUNTY_NAM) %in% tolower(region_west_central) ~ "West Central",
)

county_acs <- relocate(county_acs, region, .after = COUNTY_NAM) # move new region column to appear after county name column

# add region variable for census tract-level data
tract_acs <- relocate(tract_acs, County, .after = COUNTYFP) # move County name column to appear after county FP code

tract_acs$region <- case_when(
  tolower(tract_acs$County) %in% tolower(region_central) ~ "Central",
  tolower(tract_acs$County) %in% tolower(region_northern) ~ "Northern",
  tolower(tract_acs$County) %in% tolower(region_greater_chicago) ~ "Chicagoland",
  tolower(tract_acs$County) %in% tolower(region_collar_counties) ~ "Collar Counties",
  tolower(tract_acs$County) %in% tolower(region_northwest) ~ "Northwest",
  tolower(tract_acs$County) %in% tolower(region_north_central) ~ "North Central",
  tolower(tract_acs$County) %in% tolower(region_southeast_central) ~ "Southeast Central",
  tolower(tract_acs$County) %in% tolower(region_northeast_central) ~ "Northeast Central",
  tolower(tract_acs$County) %in% tolower(region_southern) ~ "Southern",
  tolower(tract_acs$County) %in% tolower(region_southwest_central) ~ "Southwest Central",
  tolower(tract_acs$County) %in% tolower(region_west_central) ~ "West Central",
)

tract_acs <- relocate(tract_acs, region, .after = County) # move new region column to appear after county name column

# add region variable to SNAP retailers data
SNAP_retailers$region <- case_when(
  tolower(SNAP_retailers$County) %in% tolower(region_central) ~ "Central",
  tolower(SNAP_retailers$County) %in% tolower(region_northern) ~ "Northern",
  tolower(SNAP_retailers$County) %in% tolower(region_greater_chicago) ~ "Chicagoland",
  tolower(SNAP_retailers$County) %in% tolower(region_collar_counties) ~ "Collar Counties",
  tolower(SNAP_retailers$County) %in% tolower(region_northwest) ~ "Northwest",
  tolower(SNAP_retailers$County) %in% tolower(region_north_central) ~ "North Central",
  tolower(SNAP_retailers$County) %in% tolower(region_southeast_central) ~ "Southeast Central",
  tolower(SNAP_retailers$County) %in% tolower(region_northeast_central) ~ "Northeast Central",
  tolower(SNAP_retailers$County) %in% tolower(region_southern) ~ "Southern",
  tolower(SNAP_retailers$County) %in% tolower(region_southwest_central) ~ "Southwest Central",
  tolower(SNAP_retailers$County) %in% tolower(region_west_central) ~ "West Central",
)

SNAP_retailers <- relocate(SNAP_retailers, region, .after = County)
```

## G. Create Region-Level Dataset for Mapping 
The code chunk below creates a grouped dataframe (dataset), grouped by region. Each row in the dataframe represents one region. The dataframe includes the following variables in addition to name and mapping coordinates:

- number of households in the region
- number of SNAP-receiving households in the region
- number of SNAP-receiving households that are below the poverty level in the region
- percentage of households that receive SNAP in the region
- number of Farm Direct LinkUp partners in the region
- number of Brick & Mortar LinkUp partners in the region
- total number of LinkUp partners in the region (Farm Direct + Brick & Mortar)

```{r create grouped dataframe at region level}
# create dataframe with geometry and ACS data grouped by region
region_acs <- county_acs %>%
  group_by(region) %>%
  summarize(
    n_households = sum(as.numeric(n_households)),
    n_hh_snap = sum(as.numeric(n_hh_snap)),
    n_hh_snap_poor = sum(as.numeric(n_hh_snap_poor))
  ) %>% 
 mutate(
    perc_hh_snap = n_hh_snap / n_households
  )
  
# create dataframe with number of LinkUp partners per region
partners_by_region <- SNAP_retailers %>% 
  group_by(region) %>%
  summarize(
    n_LinkUpPartners_farm_direct = sum(current_partner == "Farm Direct"),
    n_LinkUpPartners_brick_mortar = sum(current_partner == "Brick & Mortar"),
    n_LinkUpPartners_all = sum(potential_partner =="Current Partner", na.rm = TRUE),
    n_potential_partner_retailers = sum(potential_partner == "Potential Partner", na.rm = TRUE),
    n_unqualified_retailers = sum(potential_partner == "Unqualified", na.rm = TRUE),
    n_unclassified_retailers = sum(is.na(potential_partner)))

# merge LinkUp partner data to region_acs dataframe
region_acs <- merge(region_acs,
                    partners_by_region,
                    by = "region")
```

## H. Aggregate LinkUp Partners and SNAP retailers data for County and Tract Levels
This section counts the number of LinkUp partners and SNAP retailers by type in each County and in each Census Tract, similar to the above section that does this for the region. This section uses a different method than the above section since we do not have a Region variable in the LinkUp Partners data or SNAP_retailers data.
```{r aggregate retailers data to county level}
# format mappable coordinates for SNAP retailers dataframe
SNAP_retailers <- st_as_sf(SNAP_retailers, 
                           coords = c("Longitude", "Latitude"),
                           crs = "+proj=longlat +datum=WGS84 +no_defs")

# add number of LinkUp partners total per county
county_intersection <- st_intersects(county_acs, 
                                     SNAP_retailers %>% filter(potential_partner == "Current Partner"))
county_acs$n_LinkUpPartners_all <- lengths(county_intersection)

# add number of Farm Direct partners per county
county_intersection <- st_intersects(county_acs, 
                                     SNAP_retailers %>% filter(current_partner == "Farm Direct"))
county_acs$n_LinkUpPartners_farm_direct <- lengths(county_intersection)

# add number of Brick & Mortar partners per county
county_intersection <- st_intersects(county_acs, 
                                     SNAP_retailers %>% filter(current_partner == "Brick & Mortar"))
county_acs$n_LinkUpPartners_brick_mortar <- lengths(county_intersection)

# add number of SNAP retailers classified as potential partners
county_intersection <- st_intersects(county_acs, 
                                     SNAP_retailers %>% filter(potential_partner == "Potential Partner"))
county_acs$n_potential_partner_retailers <- lengths(county_intersection)

# add number of SNAP retailers classified as unqualified to be partners
county_intersection <- st_intersects(county_acs, 
                                     SNAP_retailers %>% filter(potential_partner == "Unqualified"))
county_acs$n_unqualified_retailers <- lengths(county_intersection)

# add number of SNAP retailers that are unclassified
county_intersection <- st_intersects(county_acs, 
                                     SNAP_retailers %>% filter(is.na(potential_partner)))
county_acs$n_unclassified_retailers <- lengths(county_intersection)

rm(county_intersection)

# I relied on section 3.5 of this resource for this code chunk:
# https://www.paulamoraga.com/book-spatial/the-sf-package-for-spatial-vector-data.html#:~:text=We%20can%20use%20the%20st_intersects,as%20seen%20in%20Figure%203.5. 
```

This chunk does the same thing as the above one for the census tract level.
```{r aggregate retailers data to tract level}
# first need to convert the CRS for the tract data to match my other mappable objects
# for some reason, the tract data comes with the CRS  BCS_North_American_1983 
# the rest comes with WGS 84
# consulted this resource: https://bookdown.org/robinlovelace/geocompr/reproj-geo-data.html
tract_acs <- st_transform(tract_acs, st_crs(county_acs))

st_read("Data/Geographic Boundaries/Census Tracts/tl_2022_17_tract/tl_2022_17_tract.shp")
# add number of LinkUp partners total per tract
tract_intersection <- st_intersects(tract_acs, 
                                    SNAP_retailers %>% filter(potential_partner == "Current Partner"))
tract_acs$n_LinkUpPartners_all <- lengths(tract_intersection)

# add number of Farm Direct partners per tract
tract_intersection <- st_intersects(tract_acs, 
                                    SNAP_retailers %>% filter(current_partner == "Farm Direct"))
tract_acs$n_LinkUpPartners_farm_direct <- lengths(tract_intersection)

# add number of Brick & Mortar partners per tract
tract_intersection <- st_intersects(tract_acs, 
                                    SNAP_retailers %>% filter(current_partner == "Brick & Mortar"))
tract_acs$n_LinkUpPartners_brick_mortar <- lengths(tract_intersection)

# add number of SNAP retailers classified as potential partners
tract_intersection <- st_intersects(tract_acs, 
                                    SNAP_retailers %>% filter(potential_partner == "Potential Partner"))
tract_acs$n_potential_partner_retailers <- lengths(tract_intersection)

# add number of SNAP retailers classified as unqualified to be partners
tract_intersection <- st_intersects(tract_acs, 
                                    SNAP_retailers %>% filter(potential_partner == "Unqualified"))
tract_acs$n_unqualified_retailers <- lengths(tract_intersection)

# add number of SNAP retailers that are unclassified
tract_intersection <- st_intersects(tract_acs, 
                                    SNAP_retailers %>% filter(is.na(potential_partner)))
tract_acs$n_unclassified_retailers <- lengths(tract_intersection)

rm(tract_intersection)
```


## I. Save Mappable Data to CSV

```{r saving mappable data to csv files}
# COUNTY-LEVEL DATA
# convert geometry column to text so it won't get deleted when saving to csv
county_acs$geometry_wkt <- st_as_text(county_acs$geometry)
# remove old geometry column (will cause problems while saving to csv otherwise)
county_acs$geometry <- NULL 
# save to csv
write.csv(county_acs, "Data/Mappable Data/county_acs.csv", row.names = FALSE)

# CENSUS TRACT-LEVEL DATA (same steps as for county above)
tract_acs$geometry_wkt <- st_as_text(tract_acs$geometry)
tract_acs$geometry <- NULL
write.csv(tract_acs, "Data/Mappable Data/tract_acs.csv", row.names = FALSE)

# REGION-LEVEL DATA (same steps as for county above)
region_acs$geometry_wkt <- st_as_text(region_acs$geometry)
region_acs$geometry <- NULL
write.csv(region_acs, "Data/Mappable Data/region_acs.csv", row.names = FALSE)

# save metadata file that has variable names, codes, and descriptions
write.csv(metadata_acs, "Data/Mappable Data/metadata_acs.csv", row.names = FALSE)

# save updated SNAP_retailers data to csv (corrected county names to match and added region)
write.csv(SNAP_retailers, "Data/Mappable Data/SNAP_retailers.csv", row.names = FALSE)
```



