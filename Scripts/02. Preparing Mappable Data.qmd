---
title: "02. Preparing Mappable Data"
author: "Caroline Davidson"
format: html
editor: visual
---

# Step 2: Preparing Mappable Data

The purpose of this file is to prepare data for mapping. This entails loading and formatting the various data files and shapefiles (geographic boundary files) as well as joining them so that ACS data can be mapped onto Illinois census tracts and counties in future scripts.

```{r setup}
#| echo: false
#| include: false
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file()) # set main project folder as working directory

rm(list=ls())
library(tidyverse)
library(sf)

# setting file path for proj.db since that's causing an error with maps generated with ggplot
# Sys.setenv(PROJ_LIB = "/Library/Frameworks/R.framework/Versions/4.2/Resources/library/sf/proj/proj.db")
```

The following code chunk loads the various datasets that will be used for mapping. These include:

- SNAP retailers database with Link Match partners identified (output from the first script in this project)
- Shape files for geographic boundaries (Illinois counties and Illinois census tracts)
- SNAP-related Census data for Illinois (5 year estimates at the county and census tract levels)
- metadata files that describe the variables in the above census tract files

1-year ACS estimates are not available at the census tract level and are not available for all counties in Illinois, so all analysis will use the 5-year estimates.

```{r load data}
#| message: false
#| warning: false
# Link Up and SNAP retailers data
SNAP_retailers <- read_csv("Data/Retailers and Partners/Output/IL SNAP Retailers.csv", show_col_types = FALSE)

# GEOGRAPHIC BOUNDARIES
boundaries_counties <- st_read("Data/Geographic Boundaries/Counties/IL counties POLYGON/Illinois.shp")
boundaries_census_tracts <- st_read("Data/Geographic Boundaries/Census Tracts/tl_2022_17_tract/tl_2022_17_tract.shp")

# ACS DATA
# 5-year estimates at the census tract level
acs_5yr_data_tract <- read_csv("Data/ACS Data/Census Tract Level/ACSST5Y2021.S2201_2023-07-11T173255/ACSST5Y2021.S2201-Data.csv")
acs_5yr_data_tract <- acs_5yr_data_tract[-1,]
acs_5yr_metadata_tract <- read_csv("Data/ACS Data/Census Tract Level/ACSST5Y2021.S2201_2023-07-11T173255/ACSST5Y2021.S2201-Column-Metadata.csv")
# fix formatting of metadata descriptions for readability
acs_5yr_metadata_tract$Label <- gsub("!!", ": ", acs_5yr_metadata_tract$Label)

# county level data for 5 year estimates
acs_5yr_data_county <- read_csv("Data/ACS Data/County Level/5 year estimates/ACSST5Y2021.S2201-Data.csv")
acs_5yr_data_county <- acs_5yr_data_county[-1,]
acs_5yr_metadata_county <- read_csv("Data/ACS Data/County Level/5 year estimates/ACSST5Y2021.S2201-Column-Metadata.csv")
acs_5yr_metadata_county$Label <- gsub("!!", ": ", acs_5yr_metadata_county$Label)
```

# Data Exploration / Standardization
This code chunk explores whether county names match across datasets. This is scratch work that does not need to be run. The important code for this topic is in the code chunk after this one.
```{r explore county names - optional to run}
# check if counties in acs_5yr_data_county and boundaries_counties are the same (have same #)
# create new variable removing "County, Illinois" from end of county names in acs_5yr_data_county
acs_5yr_data_county$County <- gsub(" County, Illinois", "", acs_5yr_data_county$NAME)
acs_5yr_data_county <- relocate(acs_5yr_data_county, County, .after = NAME) # reorder columns

# CROSS-CHECK: boundaries_county and acs_5yr_data_county (bi-directional)
sum(tolower(boundaries_counties$COUNTY_NAM) %in% tolower(acs_5yr_data_county$County)) # 101 matches
sum(!(tolower(boundaries_counties$COUNTY_NAM) %in% tolower(acs_5yr_data_county$County))) # 1 non-match
# print out-non matches
boundaries_counties$COUNTY_NAM[!(tolower(boundaries_counties$COUNTY_NAM) %in% tolower(acs_5yr_data_county$County))]
# DEWITT (in boundaries_counties df)
acs_5yr_data_county$County[!(tolower(acs_5yr_data_county$County) %in% tolower(boundaries_counties$COUNTY_NAM))]
# De Witt (in acs data)

# CROSS-CHECK: SNAP_retailers and acs_5yr_data_county (bi-directional)
## check which county in SNAP_retailers isn't in acs_5yr_data_county (has one extra)
# create smaller df with just unique county names in SNAP_retailers dataframe
SNAP_retailers_counties <- SNAP_retailers %>% distinct(County) %>% arrange(County)
sum(tolower(SNAP_retailers_counties$County) %in% tolower(acs_5yr_data_county$County)) # 98 matches
sum(!(tolower(SNAP_retailers_counties$County) %in% tolower(acs_5yr_data_county$County))) # 5 non-matches

SNAP_retailers_counties$County[!(tolower(SNAP_retailers_counties$County) %in% tolower(acs_5yr_data_county$County))]
# "DE KALB" "DU PAGE" "LA SALLE" "ST CLAIR" and NA (in SNAP_retailers)
acs_5yr_data_county$County[!(tolower(acs_5yr_data_county$County) %in% tolower(SNAP_retailers_counties$County))]
# "DeKalb" "DuPage" "LaSalle" "St. Clair" (in acs data)

# CROSS-CHECK: SNAP_retailers and boundaries_counties (bi-directional)
sum(tolower(SNAP_retailers_counties$County) %in% tolower(boundaries_counties$COUNTY_NAM)) # 97 matches
sum(!(tolower(SNAP_retailers_counties$County) %in% tolower(boundaries_counties$COUNTY_NAM))) # 6 non-matches

SNAP_retailers_counties$County[!(tolower(SNAP_retailers_counties$County) %in% tolower(boundaries_counties$COUNTY_NAM))]
# "DE KALB" "DE WITT" "DU PAGE" "LA SALLE" "ST CLAIR" and NA (in SNAP_retailers)
boundaries_counties$COUNTY_NAM[!(tolower(boundaries_counties$COUNTY_NAM) %in% tolower(SNAP_retailers_counties$County))]
#  "LASALLE" "DEKALB" "DEWITT" "DUPAGE"  "ST. CLAIR" (in boundaries_counties)
```

The code chunk below investigates whether county names match across the ACS dataset and shapefile (the county column will be used to merge the two datasets). It then re-codes DeWitt county in the ACS data to match the formatting in the shapefile to allow for joining the two datasets.
```{r adjust county names}
# check if counties in acs_5yr_data_county and boundaries_counties are the same (have same #)
# create new variable removing "County, Illinois" from end of county names in acs_5yr_data_county
acs_5yr_data_county$County <- gsub(" County, Illinois", "", acs_5yr_data_county$NAME)
acs_5yr_data_county <- relocate(acs_5yr_data_county, County, .after = NAME) # reorder columns

# CROSS-CHECK: boundaries_counties and acs_5yr_data_county (bi-directional)
# print out-non matches
boundaries_counties$COUNTY_NAM[!(tolower(boundaries_counties$COUNTY_NAM) %in% tolower(acs_5yr_data_county$County))]
# DEWITT (in boundaries_counties df)
acs_5yr_data_county$County[!(tolower(acs_5yr_data_county$County) %in% tolower(boundaries_counties$COUNTY_NAM))]
# De Witt (in acs data)

# make necessary adjustments to county names across dataframes
# adjust "De Witt" to "DeWitt" in acs_5yr_data_county
acs_5yr_data_county$County <- gsub("De Witt", "DeWitt", acs_5yr_data_county$County)
```

The code chunk below investigates whether census tract names match across the ACS dataset and the census tract shapefile.
- Census tract names in the acs_5yr_data_tract dataframe have the following name (format):
    - NAME (Census Tract 107.01, Champaign County, Illinois)
- Census tract names in the boundaries_census_tracts dataframe have the following name (format):
    - NAME (107.01)
We'll create 2 new columns for the ACS data, one that has just the census tract number and another with just the county name.

```{r standardize tract numbers in acs data}
# ACS DATA
# TASK: create new columns in acs_5yr_data_tract that separate out census tract number and county
# Step 1: make a copy of the NAME column called County (this column will hold only the county name at the end of these steps)
acs_5yr_data_tract$County <- acs_5yr_data_tract$NAME 
# Step 2: remove "Census Tract " from beginning of new County column 
acs_5yr_data_tract$County <-  gsub("Census Tract ", "", acs_5yr_data_tract$County)
# Step 3: remove " County, Illinois from end of County column
acs_5yr_data_tract$County <-  gsub(" County, Illinois", "", acs_5yr_data_tract$County)
# Step 4: Grab tract number and assign to new variable called Tract_Number (grabs everything up to and including the comma)
acs_5yr_data_tract$Tract_Number <- str_extract(acs_5yr_data_tract$County, "^(.+?),")
acs_5yr_data_tract$Tract_Number <- gsub(",", "", acs_5yr_data_tract$Tract_Number) # remove trailing comma
# Step 5: Remove county number from County column
acs_5yr_data_tract$County <- gsub("^(.+?), ", "", acs_5yr_data_tract$County)
# Step 6: Reorder columns to make looking at data easier
acs_5yr_data_tract <- relocate(acs_5yr_data_tract, c(Tract_Number, County), .after = NAME)
# RESULT: County name contains only county name, Tract_Number column contains only tract number
# we can now use the Tract_Number column in the acs data to match to the shape file

# check names of these columns in these two dataframes
# will check a subset to understand what's going on in each: tract number 107.01
acs_tract_107.01_subset <- acs_5yr_data_tract %>% filter(Tract_Number == "107.01")
boundaries_tract_107.01_subset <- boundaries_census_tracts %>% filter(NAME == "107.01")
```


# Joining Datasets for County Level

```{r join acs, LinkUp, and shape file - county level}
# merge acs data to county boundary shapefile
county_acs <- merge(transform(boundaries_counties, COUNTY_NAM = tolower(COUNTY_NAM)),
                     transform(acs_5yr_data_county, County = tolower(County)),
                    by.x = "COUNTY_NAM", by.y = "County", all.x = TRUE)

# merge LinkUp data to county_acs  

```

# Joining Datasets for Census Tract Level
Tract-level data needs to be joined by GEOID rather than tract number since tract numbers repeat across counties. 
```{r tract GEOID check across datasets}
# in acs data all geoIDs start with 1400000US then the geoID code that's the same as in shape file
acs_5yr_data_tract$GEO_ID <- gsub("1400000US", "", acs_5yr_data_tract$GEO_ID)

# check that all GEO_IDs that show up in acs_5yr_data_tract show up in boundaries_census_tracts and vice versa
sum(acs_5yr_data_tract$GEO_ID %in% boundaries_census_tracts$GEOID) #3265 matches
sum(!(acs_5yr_data_tract$GEO_ID %in% boundaries_census_tracts$GEOID)) # 0 non-matches

sum(boundaries_census_tracts$GEOID %in% acs_5yr_data_tract$GEO_ID) # 3265 matches
sum(!(boundaries_census_tracts$GEOID %in% acs_5yr_data_tract$GEO_ID)) # - non-matches

# checking that census tracts aren't repeated in the data
length(unique(boundaries_census_tracts$GEOID)) # 3265 unique values
length(unique(acs_5yr_data_tract$GEO_ID)) # 3265 unique values
```

The checks on GEO ID above all checked out (no repeated GEO IDs, same GEO IDs in both files) so the data is now ready to merge.
```{r join acs, LinkUp, and shape file - census tract level}
# merge acs data to census tract boundary shapefile
tract_acs <- merge(boundaries_census_tracts,
                   acs_5yr_data_tract,
                   by.x = "GEOID", by.y = "GEO_ID", all = TRUE)

# merge LinkUp data to county_acs  


```


The below code chunk defines the regions that will be used to divide up the state. If differently-constructed regions are desired in the future, they should be adjusted in this code chunk and the one that follows it that applies these regions to the datasets. The rest of the file will run fine and consider this new division of regions as defined in this code chunk and applied in the following code chunk.
```{r define IL regions}
#| results: hide
all_counties <- unique(acs_5yr_data_county$County)
all_counties # this will print out the county names, be sure to spell accordingly if you change the division of regions below
# note, you don't need to respect capitalization, but you do need to respect spacing and punctuation
# "St. Clair" and "St Clair" will be interpreted as two different counties, so will "La Salle" and "LaSalle"
# syntax is also important here, all county names must be in "", separated by a comma that is outside the quotes

region_central <- c("Cass", "Christian", "Greene", "Logan", "Macon", "Macoupin",
                    "Menard", "Montgomery", "Morgan", "Sangamon", "Scott", "Shelby")

region_northern <- c("Boone", "DeKalb", "Ogle", "Stephenson", "Winnebago")

region_greater_chicago <- c("Cook")

region_collar_counties <- c("DuPage", "Grundy", "Kane", "Kankakee", "Kendall", 
                            "Lake", "McHenry", "Will")

region_northwest <- c("Bureau", "Carroll", "Henry", "Jo Daviess", "Lee", "LaSalle",
                      "Mercer", "Putnam", "Rock Island", "Whiteside")

region_north_central <- c("DeWitt", "Fulton", "Livingston", "Marshall", "Mason", "McLean",
                          "Peoria", "Stark", "Tazewell", "Woodford")

region_southeast_central <- c("Clark", "Clay", "Coles", "Crawford", "Cumberland",
                              "Edgar", "Effingham", "Fayette", "Jasper", "Lawrence",
                              "Marion", "Moultrie", "Richland")

region_northeast_central <- c("Champaign", "Douglas", "Ford", "Iroquois", "Piatt", "Vermilion")

region_southern <- c("Alexander", "Edwards", "Franklin", "Gallatin", "Hamilton", 
                    "Hardin", "Jackson", "Jefferson", "Johnson", "Massac", "Perry",
                    "Pope", "Pulaski", "Randolph", "Saline", "Wabash", "Wayne", 
                    "White", "Williamson", "Union")

region_southwest_central <- c("Bond", "Calhoun", "Clinton", "Jersey", "Madison",
                              "Monroe", "St. Clair", "Washington")

region_west_central <- c("Adams", "Brown", "Hancock", "Henderson", "Knox", 
                         "McDonough", "Pike", "Schuyler", "Warren")
```

The code chunk below applies the regions defined above to the census tract and county level datasets by creating a new "region" variable in each and assigning it accordingly. If the designation of regions is changed above, the last two arguments of each line below should be adjusted accordingly. For example, if the Central region is changed to include different counties and its name changes to "Midstate", the first line inside the case_when function for county_acs below should change to:
  tolower(county_acs$COUNTY_NAM) %in% tolower(region_midstate) ~ "Midstate",
  
These adjustments will need to be made manually for both the county_acs and tract_acs datasets in the chunk below.
```{r apply IL regions to datasets}
# add region variable for county-level data
county_acs$region <- case_when(
  tolower(county_acs$COUNTY_NAM) %in% tolower(region_central) ~ "Central",
  tolower(county_acs$COUNTY_NAM) %in% tolower(region_northern) ~ "Northern",
  tolower(county_acs$COUNTY_NAM) %in% tolower(region_greater_chicago) ~ "Chicagoland",
  tolower(county_acs$COUNTY_NAM) %in% tolower(region_collar_counties) ~ "Collar Counties",
  tolower(county_acs$COUNTY_NAM) %in% tolower(region_northwest) ~ "Northwest",
  tolower(county_acs$COUNTY_NAM) %in% tolower(region_north_central) ~ "North Central",
  tolower(county_acs$COUNTY_NAM) %in% tolower(region_southeast_central) ~ "Southeast Central",
  tolower(county_acs$COUNTY_NAM) %in% tolower(region_northeast_central) ~ "Northeast Central",
  tolower(county_acs$COUNTY_NAM) %in% tolower(region_southern) ~ "Southern",
  tolower(county_acs$COUNTY_NAM) %in% tolower(region_southwest_central) ~ "Southwest Central",
  tolower(county_acs$COUNTY_NAM) %in% tolower(region_west_central) ~ "West Central",
)

county_acs <- relocate(county_acs, region, .after = COUNTY_NAM) # move new region column to appear after county name column

# add region variable for census tract-level data
tract_acs <- relocate(tract_acs, County, .after = COUNTYFP) # move County name column to appear after county FP code

tract_acs$region <- case_when(
  tolower(tract_acs$County) %in% tolower(region_central) ~ "Central",
  tolower(tract_acs$County) %in% tolower(region_northern) ~ "Northern",
  tolower(tract_acs$County) %in% tolower(region_greater_chicago) ~ "Chicagoland",
  tolower(tract_acs$County) %in% tolower(region_collar_counties) ~ "Collar Counties",
  tolower(tract_acs$County) %in% tolower(region_northwest) ~ "Northwest",
  tolower(tract_acs$County) %in% tolower(region_north_central) ~ "North Central",
  tolower(tract_acs$County) %in% tolower(region_southeast_central) ~ "Southeast Central",
  tolower(tract_acs$County) %in% tolower(region_northeast_central) ~ "Northeast Central",
  tolower(tract_acs$County) %in% tolower(region_southern) ~ "Southern",
  tolower(tract_acs$County) %in% tolower(region_southwest_central) ~ "Southwest Central",
  tolower(tract_acs$County) %in% tolower(region_west_central) ~ "West Central",
)

tract_acs <- relocate(tract_acs, region, .after = County) # move new region column to appear after county name column
```













