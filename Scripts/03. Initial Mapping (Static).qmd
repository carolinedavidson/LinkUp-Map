---
title: "03. Initial Mapping (Static)"
author: "Caroline Davidson"
format: html
---

# Step 3: Initial Mapping (Static, i.e. Noninteractive)
NOTE: This script does not load in data files like the previous ones. Instead, you MUST RUN SCRIPT "02. Preparing Mappable Data" before using or running this script. Script 02 loads and prepares the data used in this script.

```{r setup}
#| echo: false
#| include: false
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file()) # set main project folder as working directory

rm(list=ls())
library(tidyverse)
library(sf)
library(leaflet)
library(ggplot2)

# setting file path for proj.db since that's causing an error with maps generated with ggplot
# Sys.setenv(PROJ_LIB = "/Library/Frameworks/R.framework/Versions/4.2/Resources/library/sf/proj/proj.db")
```

The below code chunk loads the csv datafiles that the previous two scripts create. For the county, tract, and region-level files, we need a 2-step approach: (1) read in the csv file, (2) convert the geometry column back to a mappable format. For the SNAP_level data, we will create the geometry column in this dataframe.
```{r load data}
# region
region_acs <- read_csv("Data/Mappable Data/region_acs.csv", show_col_types = FALSE)
region_acs <- st_as_sf(region_acs, 
                       wkt = "geometry_wkt",
                       crs = "+proj=longlat +datum=WGS84 +no_defs")
region_acs <- region_acs %>% rename("geometry" = "geometry_wkt")
# county
county_acs <- read_csv("Data/Mappable Data/county_acs.csv", show_col_types = FALSE)
county_acs <- st_as_sf(county_acs, 
                       wkt = "geometry_wkt",
                       crs = "+proj=longlat +datum=WGS84 +no_defs")
county_acs <- county_acs %>% rename("geometry" = "geometry_wkt")
# tract
tract_acs <- read_csv("Data/Mappable Data/tract_acs.csv", show_col_types = FALSE)
tract_acs <- st_as_sf(tract_acs, 
                      wkt = "geometry_wkt",
                      crs = "+proj=longlat +datum=WGS84 +no_defs")
tract_acs <- tract_acs %>% rename("geometry" = "geometry_wkt")
```

# Initial Mapping

```{r initial basic maps - perc hh snap}
# map of counties by percent of households receiving food stamps/SNAP
plot(county_acs["perc_hh_snap"], main = "Percentage of Households Receiving SNAP by County")

plot(tract_acs["perc_hh_snap"], main = "Percentage of Households Receiving SNAP by Census Tract")

plot(region_acs["perc_hh_snap"], main = "Percentage of Households Receiving SNAP by Region")

plot(region_acs["n_hh_snap"], main = "Number of Households Receiving SNAP by Region")

plot(region_acs["n_LinkUpPartners_all"], main = "Number of LinkUp Partners by Region")

```

```{r basic leaflet map}
# create subset of SNAP_retailers that only includes current partners
LinkUp_Partners <- SNAP_retailers %>% 
  filter(potential_partner == "Current Partner")

leaflet_counties <- leaflet() %>%
  addTiles() %>%
  addPolygons(
    data = county_acs,
    fillColor = "white",
    color = "green"
  ) %>% 
  addMarkers(lat = LinkUp_Partners$Latitude,
             lng = LinkUp_Partners$Longitude)

leaflet_counties
```



```{r ggplot maps can't get to work}
# trying again
ggplot(county_acs) +
  geom_sf(aes(fill = perc_hh_snap)) + 
  scale_fill_viridis_c() + 
  labs(title = "Percentage of Households Receiving SNAP by County") +
  theme_minimal()

# can't get this to work
ggplot() +
  geom_sf(data = county_acs,
          aes(fill = perc_hh_snap, color = perc_hh_snap)) +
  scale_fill_brewer(palette = "YlGn", name = "Percentage", direction = -1) +
  scale_color_brewer(palette = "YlGn", name = "Percentage", direction = -1) +
  theme_void() +
  labs(
    title = "Percent of Households Receiving Food Stamps / SNAP by County",
    subtitle = "2021 5-Year Estimates from ACS"
  )
```


```{r}
# intermediate materials to send

County_Level_Snap_Data  <- county_acs_subset

County_Level_Snap_Data <- County_Level_Snap_Data %>%
  rename(
    `County Name` = NAME,
    `Number of Households receiving SNAP` = S2201_C03_001E,
    `Number of Households receiving SNAP and below the poverty level` = S2201_C03_021E,
    `Percent of Households receiving SNAP` = S2201_C04_001E
    ) %>%
  select(`County Name`, 
         `Number of Households receiving SNAP`, 
         `Number of Households receiving SNAP and below the poverty level`, 
         `Percent of Households receiving SNAP`)

class(County_Level_Snap_Data) # sf and data.frame, might be easier to select from original df

County_Level_SNAP_Data <- acs_5yr_data_county %>% 
  select(County,
         S2201_C04_001E,
         S2201_C03_001E,
         S2201_C03_021E
         ) %>%
  mutate(
    S2201_C04_001E = as.numeric(S2201_C04_001E),
    S2201_C03_001E = as.numeric(S2201_C03_001E),
    S2201_C03_021E = as.numeric(S2201_C03_021E)
  ) %>%
  arrange(desc(S2201_C04_001E)) %>%
  rename(
    `Number of Households receiving SNAP` = S2201_C03_001E,
    `Number of Households receiving SNAP and below the poverty level` = S2201_C03_021E,
    `Percent of Households receiving SNAP` = S2201_C04_001E
  )

write_csv(County_Level_SNAP_Data, file = "Output/County_Level_SNAP_data.csv")

# plot of counties by percentage of households receiving SNAP benefits
plot(county_acs_subset["S2201_C04_001E"], main = "Percentage of Households receiving SNAP by County") 
```

- S2201_C03_001E  /  Estimate: Households receiving food stamps/SNAP: Households
- S2201_C03_021E /  Estimate: Households receiving food stamps/SNAP: Households: POVERTY STATUS IN THE PAST 12 MONTHS: Below poverty level
- S2201_C04_001E  /  Estimate: Percent households receiving food stamps/SNAP: Households

